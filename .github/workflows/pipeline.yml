name: Build & Deploy

on:
    push:
        branches: [main]

jobs:
    build:
        runs-on: ubuntu-latest
        permissions:
            id-token: write
            contents: read
            packages: write
        outputs:
            image: ${{ steps.login-ecr.outputs.registry }}/contitrans
            digest: ${{ steps.build-image.outputs.digest }}
        steps:
            - id: checkout
              name: Checkout
              uses: actions/checkout@v2
            # - name: Configure AWS credentials
            #   uses: aws-actions/configure-aws-credentials@v4
            #   with:
            #       role-to-assume: arn:aws:iam::574681690878:role/githubRole
            #       aws-region: eu-central-1
            - id: auth
              name: Authenticate with Google Cloud
              uses: google-github-actions/auth@v0
              with:
                  token_format: access_token
                  workload_identity_provider: ${{ secrets.IDENTITY_PROVIDER }}
                  service_account: ${{ secrets.SERVICE_ACCOUNT }}
                  access_token_lifetime: 300s
            - name: "Set up Cloud SDK"
              uses: "google-github-actions/setup-gcloud@v1"
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v2
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2
            # - name: Login to Amazon ECR
            #   id: login-ecr
            #   uses: aws-actions/amazon-ecr-login@v2
            # - name: Login to Artifact Registry
            #   uses: docker/login-action@v3
            #   with:
            #       registry: europe-west3-docker.pkg.dev
            #       username: oauth2accesstoken
            #       password: ${{ steps.auth.outputs.access_token }}
            - name: "Docker auth"
              run: |-
                  gcloud auth configure-docker europe-west3-docker.pkg.dev --quiet
            - name: Build and push
              id: build-image
              uses: docker/build-push-action@v2
              with:
                  platforms: linux/arm64
                  push: true
                  tags: europe-west3-docker.pkg.dev/kalandozastravel/contitrans/contitrans:latest
                  build-args: ${{ secrets.ENV_FILE }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
            # - name: Login to Docker Hub
            #   uses: docker/login-action@v2
            #   with:
            #       username: ${{ secrets.DOCKERHUB_USERNAME }}
            #       password: ${{ secrets.DOCKERHUB_TOKEN }}
            # - name: Build and push
            #   id: build-image
            #   uses: docker/build-push-action@v3
            #   with:
            #       push: true
            #       tags: contitrans/web:latest
            #       build-args: ${{ secrets.ENV_FILE }}
    deploy:
        needs: build
        runs-on: ubuntu-latest
        permissions:
            id-token: write
            contents: read
            packages: write
        steps:
            # - name: Configure AWS credentials
            #   uses: aws-actions/configure-aws-credentials@v4
            #   with:
            #       role-to-assume: arn:aws:iam::574681690878:role/githubRole
            #       aws-region: eu-central-1
            # - name: Download task definition
            #   run: |
            #       aws ecs describe-task-definition --task-definition contitrans --query taskDefinition > task-definition.json
            #       echo $(cat task-definition.json | jq 'del(
            #                 .taskDefinitionArn,
            #                 .requiresAttributes,
            #                 .compatibilities,
            #                 .revision,
            #                 .status,
            #                 .registeredAt,
            #                 .registeredBy
            #             )') > task-definition.json
            # - name: Fill in the new image ID in the Amazon ECS task definition
            #   id: task-def
            #   uses: aws-actions/amazon-ecs-render-task-definition@v1
            #   with:
            #       task-definition: task-definition.json
            #       container-name: contitrans
            #       image: ${{ needs.build.outputs.image }}@${{ needs.build.outputs.digest }}
            # - name: Deploy Amazon ECS task definition
            #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
            #   with:
            #       task-definition: ${{ steps.task-def.outputs.task-definition }}
            #       service: contitrans
            #       cluster: neoline
            #       wait-for-service-stability: false

            - name: Deploy app
              uses: appleboy/ssh-action@v0.1.2
              with:
                  host: ${{secrets.SSH_HOST}}
                  key: ${{secrets.SSH_KEY}}
                  username: ${{secrets.SSH_USERNAME}}

                  script: |
                      cd /home/github
                      cd contitrans
                      git pull
                      docker compose pull contitrans
                      docker compose up -d
